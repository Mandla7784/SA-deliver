name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: |
        cd backend
        mvn clean test
        
    - name: Build backend
      run: |
        cd backend
        mvn clean package -DskipTests
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: backend/target/surefire-reports/
        
    - name: Upload backend JAR
      uses: actions/upload-artifact@v3
      with:
        name: backend-jar
        path: backend/target/*.jar

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies (if package.json exists)
      run: |
        if [ -f frontend/package.json ]; then
          cd frontend
          npm ci
        fi
      continue-on-error: true
      
    - name: Lint HTML/CSS/JS
      run: |
        echo "Frontend linting would go here"
        # Add HTML/CSS/JS linting tools if needed
        
    - name: Build frontend
      run: |
        cd frontend
        # Create a simple build process
        mkdir -p dist
        cp *.html dist/ || true
        cp *.css dist/ || true
        cp *.js dist/ || true
        
    - name: Upload frontend build
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Download backend JAR
      uses: actions/download-artifact@v3
      with:
        name: backend-jar
        
    - name: Start backend server
      run: |
        cd backend
        java -cp "target/classes:target/dependency/*" main.java.Server &
        sleep 10
        
    - name: Run integration tests
      run: |
        echo "Integration tests would run here"
        # Add API integration tests
        
    - name: Stop backend server
      run: |
        pkill -f "main.java.Server" || true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-test]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add staging deployment logic here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add production deployment logic here

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
      run: |
        echo "Deployment successful!"
        
    - name: Notify failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: |
        echo "Deployment failed!"
